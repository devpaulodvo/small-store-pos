{"ast":null,"code":"const Schema = props => {};\n\n_c = Schema;\nexport default Schema;\nexport let RegisterSchema = Yup.object().shape({\n  username: Yup.string().min(5, \"Username must be 5 characters long\").required('Required Username') // .test(\"is_exists\", `${username1} is not available`, (value)=>{\n  //     return new Promise( async (resolve, reject)=>{\n  //         let result = await Axios.post(\"http://localhost:3001/checkusername\", {\n  //             username: username1,\n  //             password: password1\n  //             }, {\n  //                 headers: {'Content-Type': 'application/json'}\n  //             })\n  //     if(value === result.data.username){\n  //         resolve(false)\n  //     }\n  //     else{\n  //         resolve(true)\n  //     }\n  //     })\n  // })\n  ,\n  password: Yup.string().min(6, \"Must be 6 or more characters\").required('Required Password'),\n  cpassword: Yup.string().oneOf([Yup.ref('password'), null], 'Passwords must match').required('Required Confirm Password')\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"Schema\");","map":{"version":3,"sources":["/Users/kururugi/Desktop/React Applications/my-barber/src/Schemas/Schema.js"],"names":["Schema","props","RegisterSchema","Yup","object","shape","username","string","min","required","password","cpassword","oneOf","ref"],"mappings":"AACA,MAAMA,MAAM,GAAIC,KAAD,IAAU,CAExB,CAFD;;KAAMD,M;AAIN,eAAeA,MAAf;AAEA,OAAO,IAAIE,cAAc,GAAGC,GAAG,CAACC,MAAJ,GAAaC,KAAb,CAAmB;AAC3CC,EAAAA,QAAQ,EAAEH,GAAG,CAACI,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoB,oCAApB,EAA0DC,QAA1D,CAAmE,mBAAnE,CADiC,CAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlB2C;AAoB3CC,EAAAA,QAAQ,EAAEP,GAAG,CAACI,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoB,8BAApB,EAAoDC,QAApD,CAA6D,mBAA7D,CApBiC;AAqB3CE,EAAAA,SAAS,EAAER,GAAG,CAACI,MAAJ,GACVK,KADU,CACJ,CAACT,GAAG,CAACU,GAAJ,CAAQ,UAAR,CAAD,EAAsB,IAAtB,CADI,EACyB,sBADzB,EACiDJ,QADjD,CAC0D,2BAD1D;AArBgC,CAAnB,CAArB","sourcesContent":["\nconst Schema = (props) =>{\n\n}\n\nexport default Schema;\n\nexport let RegisterSchema = Yup.object().shape({\n    username: Yup.string().min(5, \"Username must be 5 characters long\").required('Required Username')\n    // .test(\"is_exists\", `${username1} is not available`, (value)=>{\n    //     return new Promise( async (resolve, reject)=>{\n    //         let result = await Axios.post(\"http://localhost:3001/checkusername\", {\n    //             username: username1,\n    //             password: password1\n    //             }, {\n    //                 headers: {'Content-Type': 'application/json'}\n    //             })\n                \n    //     if(value === result.data.username){\n    //         resolve(false)\n    //     }\n    //     else{\n    //         resolve(true)\n    //     }\n    //     })\n    // })\n    ,\n    password: Yup.string().min(6, \"Must be 6 or more characters\").required('Required Password'),\n    cpassword: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Passwords must match').required('Required Confirm Password')\n});"]},"metadata":{},"sourceType":"module"}