{"ast":null,"code":"import * as Yup from 'yup';\n\nconst Schema = props => {};\n\n_c = Schema;\nexport default Schema;\nexport let RegisterSchema = Yup.object().shape({\n  username: Yup.string().min(5, \"Username must be 5 characters long\").required('Required Username').test(\"is_exists\", `${username1} is not available`, value => {\n    return new Promise(async (resolve, reject) => {\n      let result = await Axios.post(\"http://localhost:3001/checkusername\", {\n        username: username1,\n        password: password1\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (value === result.data.username) {\n        resolve(false);\n      } else {\n        resolve(true);\n      }\n    });\n  }),\n  password: Yup.string().min(6, \"Must be 6 or more characters\").required('Required Password'),\n  cpassword: Yup.string().oneOf([Yup.ref('password'), null], 'Passwords must match').required('Required Confirm Password')\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"Schema\");","map":{"version":3,"sources":["/Users/kururugi/Desktop/React Applications/my-barber/src/Schemas/Schema.js"],"names":["Yup","Schema","props","RegisterSchema","object","shape","username","string","min","required","test","username1","value","Promise","resolve","reject","result","Axios","post","password","password1","headers","data","cpassword","oneOf","ref"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAU,CAExB,CAFD;;KAAMD,M;AAIN,eAAeA,MAAf;AAEA,OAAO,IAAIE,cAAc,GAAGH,GAAG,CAACI,MAAJ,GAAaC,KAAb,CAAmB;AAC3CC,EAAAA,QAAQ,EAAEN,GAAG,CAACO,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoB,oCAApB,EAA0DC,QAA1D,CAAmE,mBAAnE,EACTC,IADS,CACJ,WADI,EACU,GAAEC,SAAU,mBADtB,EAC2CC,KAAD,IAAS;AACzD,WAAO,IAAIC,OAAJ,CAAa,OAAOC,OAAP,EAAgBC,MAAhB,KAAyB;AACzC,UAAIC,MAAM,GAAG,MAAMC,KAAK,CAACC,IAAN,CAAW,qCAAX,EAAkD;AACjEZ,QAAAA,QAAQ,EAAEK,SADuD;AAEjEQ,QAAAA,QAAQ,EAAEC;AAFuD,OAAlD,EAGZ;AACCC,QAAAA,OAAO,EAAE;AAAC,0BAAgB;AAAjB;AADV,OAHY,CAAnB;;AAOJ,UAAGT,KAAK,KAAKI,MAAM,CAACM,IAAP,CAAYhB,QAAzB,EAAkC;AAC9BQ,QAAAA,OAAO,CAAC,KAAD,CAAP;AACH,OAFD,MAGI;AACAA,QAAAA,OAAO,CAAC,IAAD,CAAP;AACH;AACA,KAdM,CAAP;AAeH,GAjBS,CADiC;AAoB3CK,EAAAA,QAAQ,EAAEnB,GAAG,CAACO,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoB,8BAApB,EAAoDC,QAApD,CAA6D,mBAA7D,CApBiC;AAqB3Cc,EAAAA,SAAS,EAAEvB,GAAG,CAACO,MAAJ,GACViB,KADU,CACJ,CAACxB,GAAG,CAACyB,GAAJ,CAAQ,UAAR,CAAD,EAAsB,IAAtB,CADI,EACyB,sBADzB,EACiDhB,QADjD,CAC0D,2BAD1D;AArBgC,CAAnB,CAArB","sourcesContent":["import * as Yup from 'yup';\n\nconst Schema = (props) =>{\n\n}\n\nexport default Schema;\n\nexport let RegisterSchema = Yup.object().shape({\n    username: Yup.string().min(5, \"Username must be 5 characters long\").required('Required Username')\n    .test(\"is_exists\", `${username1} is not available`, (value)=>{\n        return new Promise( async (resolve, reject)=>{\n            let result = await Axios.post(\"http://localhost:3001/checkusername\", {\n                username: username1,\n                password: password1\n                }, {\n                    headers: {'Content-Type': 'application/json'}\n                })\n                \n        if(value === result.data.username){\n            resolve(false)\n        }\n        else{\n            resolve(true)\n        }\n        })\n    })\n    ,\n    password: Yup.string().min(6, \"Must be 6 or more characters\").required('Required Password'),\n    cpassword: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Passwords must match').required('Required Confirm Password')\n});"]},"metadata":{},"sourceType":"module"}