{"ast":null,"code":"import * as Yup from 'yup';\nexport let RegisterSchema = Yup.object().shape({\n  username: Yup.string().min(5, \"Username must be 5 characters long\").required('Required Username') // .test(\"is_exists\", `${username1} is not available`, (value)=>{\n  //     return new Promise( async (resolve, reject)=>{\n  //         let result = await Axios.post(\"http://localhost:3001/checkusername\", {\n  //             username: username1,\n  //             password: password1\n  //             }, {\n  //                 headers: {'Content-Type': 'application/json'}\n  //             })\n  //     if(value === result.data.username){\n  //         resolve(false)\n  //     }\n  //     else{\n  //         resolve(true)\n  //     }\n  //     })\n  // })\n  ,\n  password: Yup.string().min(6, \"Must be 6 or more characters\").required('Required Password'),\n  cpassword: Yup.string().oneOf([Yup.ref('password'), null], 'Passwords must match').required('Required Confirm Password')\n});\nlet loginSchema = Yup.object().shape({\n  username: Yup.string().required('Required Username') // .test(\"is_exists\", \"Incorrect Password\", (value)=>{\n  //     return new Promise( async (resolve, reject)=>{\n  //         let result = await Axios.post(\"http://localhost:3001/login\", {\n  //             username: username,\n  //             password: password\n  //             }, {\n  //                 headers: {'Content-Type': 'application/json'}\n  //             })\n  //     if(result.data.username){\n  //         resolve(true)\n  //     }\n  //     else{\n  //         resolve(false)\n  //     }\n  //     })\n  // })\n  ,\n  password: Yup.string().required(\"Required password\").test(\"is_exists\", \"Incorrect Password\", value => {\n    return new Promise(async (resolve, reject) => {\n      let result = await Axios.post(\"http://localhost:3001/login\", {\n        username: username,\n        password: password\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (result.data.username) {\n        resolve(true);\n      } else {\n        resolve(false);\n      }\n    });\n  })\n});","map":{"version":3,"sources":["/Users/kururugi/Desktop/React Applications/my-barber/src/Schemas/Schema.js"],"names":["Yup","RegisterSchema","object","shape","username","string","min","required","password","cpassword","oneOf","ref","loginSchema","test","value","Promise","resolve","reject","result","Axios","post","headers","data"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AAGA,OAAO,IAAIC,cAAc,GAAGD,GAAG,CAACE,MAAJ,GAAaC,KAAb,CAAmB;AAC3CC,EAAAA,QAAQ,EAAEJ,GAAG,CAACK,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoB,oCAApB,EAA0DC,QAA1D,CAAmE,mBAAnE,CADiC,CAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlB2C;AAoB3CC,EAAAA,QAAQ,EAAER,GAAG,CAACK,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoB,8BAApB,EAAoDC,QAApD,CAA6D,mBAA7D,CApBiC;AAqB3CE,EAAAA,SAAS,EAAET,GAAG,CAACK,MAAJ,GACVK,KADU,CACJ,CAACV,GAAG,CAACW,GAAJ,CAAQ,UAAR,CAAD,EAAsB,IAAtB,CADI,EACyB,sBADzB,EACiDJ,QADjD,CAC0D,2BAD1D;AArBgC,CAAnB,CAArB;AAyBP,IAAIK,WAAW,GAAGZ,GAAG,CAACE,MAAJ,GAAaC,KAAb,CAAmB;AACjCC,EAAAA,QAAQ,EAAEJ,GAAG,CAACK,MAAJ,GAAaE,QAAb,CAAsB,mBAAtB,CADuB,CAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBiC;AAoBjCC,EAAAA,QAAQ,EAAER,GAAG,CAACK,MAAJ,GAAaE,QAAb,CAAsB,mBAAtB,EACTM,IADS,CACJ,WADI,EACS,oBADT,EACgCC,KAAD,IAAS;AAC9C,WAAO,IAAIC,OAAJ,CAAa,OAAOC,OAAP,EAAgBC,MAAhB,KAAyB;AACzC,UAAIC,MAAM,GAAG,MAAMC,KAAK,CAACC,IAAN,CAAW,6BAAX,EAA0C;AACzDhB,QAAAA,QAAQ,EAAEA,QAD+C;AAEzDI,QAAAA,QAAQ,EAAEA;AAF+C,OAA1C,EAGZ;AACCa,QAAAA,OAAO,EAAE;AAAC,0BAAgB;AAAjB;AADV,OAHY,CAAnB;;AAOJ,UAAGH,MAAM,CAACI,IAAP,CAAYlB,QAAf,EAAwB;AACpBY,QAAAA,OAAO,CAAC,IAAD,CAAP;AACH,OAFD,MAGI;AACAA,QAAAA,OAAO,CAAC,KAAD,CAAP;AACH;AACA,KAdM,CAAP;AAeH,GAjBS;AApBuB,CAAnB,CAAlB","sourcesContent":["import * as Yup from 'yup';\n\n\nexport let RegisterSchema = Yup.object().shape({\n    username: Yup.string().min(5, \"Username must be 5 characters long\").required('Required Username')\n    // .test(\"is_exists\", `${username1} is not available`, (value)=>{\n    //     return new Promise( async (resolve, reject)=>{\n    //         let result = await Axios.post(\"http://localhost:3001/checkusername\", {\n    //             username: username1,\n    //             password: password1\n    //             }, {\n    //                 headers: {'Content-Type': 'application/json'}\n    //             })\n                \n    //     if(value === result.data.username){\n    //         resolve(false)\n    //     }\n    //     else{\n    //         resolve(true)\n    //     }\n    //     })\n    // })\n    ,\n    password: Yup.string().min(6, \"Must be 6 or more characters\").required('Required Password'),\n    cpassword: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Passwords must match').required('Required Confirm Password')\n});\n\nlet loginSchema = Yup.object().shape({\n    username: Yup.string().required('Required Username')\n    // .test(\"is_exists\", \"Incorrect Password\", (value)=>{\n    //     return new Promise( async (resolve, reject)=>{\n    //         let result = await Axios.post(\"http://localhost:3001/login\", {\n    //             username: username,\n    //             password: password\n    //             }, {\n    //                 headers: {'Content-Type': 'application/json'}\n    //             })\n                \n    //     if(result.data.username){\n    //         resolve(true)\n    //     }\n    //     else{\n    //         resolve(false)\n    //     }\n    //     })\n    // })\n    ,\n    password: Yup.string().required(\"Required password\")\n    .test(\"is_exists\", \"Incorrect Password\", (value)=>{\n        return new Promise( async (resolve, reject)=>{\n            let result = await Axios.post(\"http://localhost:3001/login\", {\n                username: username,\n                password: password\n                }, {\n                    headers: {'Content-Type': 'application/json'}\n                })\n                \n        if(result.data.username){\n            resolve(true)\n        }\n        else{\n            resolve(false)\n        }\n        })\n    }),\n})"]},"metadata":{},"sourceType":"module"}