{"ast":null,"code":"var _jsxFileName = \"/Users/kururugi/Desktop/React Applications/my-barber/src/Components/Register/Register.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport Axios from \"axios\";\nimport styles from './Register.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Register = props => {\n  _s();\n\n  const [username1, setUsername] = useState('');\n  const [password1, setPassword] = useState('');\n  const [cpassword1, setCPassword] = useState('');\n  const [exist, setExist] = useState(false);\n\n  const sendPostRequest = async () => {\n    let result = await Axios.post(\"http://localhost:3001/register\", {\n      username: username1,\n      password: password1\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (result.data !== 1) {\n      alert(JSON.stringify(\"Registered!\"));\n      return '0';\n    } else {\n      setExist(true);\n      alert(JSON.stringify(\"Username Exists!\"));\n    } // Axios.post(\"http://localhost:3001/register\", {\n    //     username: username1,\n    //     password: password1,\n    // }).then(()=>{\n    //         alert(\"successful insert\");\n    //     });\n    // try {\n    //     await Axios.post(\"http://localhost:3001/register\", {\n    //         username: username,\n    //         password: password,\n    //     }).then(()=>{\n    //         alert(\"Registered!\");\n    //     });\n    //     // console.log(resp.data);\n    // }catch (err) {\n    //     // Handle Error Here\n    //     console.error(err);\n    // }\n\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.div,\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      validateOnChange: false,\n      validateOnBlur: false,\n      initialValues: {\n        email: '',\n        password: '',\n        cpassword: ''\n      },\n      validate: values => {\n        const errors = {};\n\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\n          errors.email = 'Invalid email address';\n        }\n\n        if (exist === true) {\n          errors.email = 'Username is not available';\n        }\n\n        if (!values.password) {\n          errors.password = 'Required';\n        } else if (values.password.length < 5) {\n          errors.password = 'Password too short!';\n        } else if (values.password.length === 0) {\n          errors.password = '';\n        }\n\n        if (values.cpassword !== values.password) {\n          errors.cpassword = 'Password and Confirm Password did not match';\n        }\n\n        return errors;\n      },\n      onSubmit: (values, {\n        validate,\n        setSubmitting,\n        resetForm\n      }) => {\n        setTimeout(() => {\n          sendPostRequest().then(res => {\n            if (res === '0') {\n              console.log(res);\n              setPassword('');\n              setUsername('');\n              resetForm({\n                values: ''\n              });\n            } else {\n              console.log(values); // validate(values);\n            }\n          });\n          setSubmitting(false);\n        }, 400);\n      },\n      children: ({\n        isSubmitting\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        className: styles.form,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: `${styles.label}`,\n          children: \"Username\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          onKeyUp: event => {\n            setUsername(event.target.value);\n          },\n          type: \"email\",\n          name: \"email\",\n          className: `${styles.input}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          name: \"email\",\n          component: \"div\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: `${styles.label}`,\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          onKeyUp: event => {\n            setPassword(event.target.value);\n          },\n          type: \"password\",\n          name: \"password\",\n          className: `${styles.input}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          name: \"password\",\n          component: \"div\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: `${styles.label}`,\n          children: \"Confirm Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          onKeyUp: event => {\n            setCPassword(event.target.value);\n          },\n          type: \"password\",\n          name: \"cpassword\",\n          className: `${styles.input}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          name: \"cpassword\",\n          component: \"div\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onSubmit: sendPostRequest,\n          type: \"submit\",\n          disabled: isSubmitting,\n          className: `${styles.button}`,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Register, \"K5je3tOtmdx1s3KmTMUIInKBQww=\");\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/Users/kururugi/Desktop/React Applications/my-barber/src/Components/Register/Register.js"],"names":["React","useState","Formik","Form","Field","ErrorMessage","Axios","styles","Register","props","username1","setUsername","password1","setPassword","cpassword1","setCPassword","exist","setExist","sendPostRequest","result","post","username","password","headers","data","alert","JSON","stringify","div","textAlign","email","cpassword","values","errors","test","length","validate","setSubmitting","resetForm","setTimeout","then","res","console","log","isSubmitting","form","label","event","target","value","input","button"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport Axios from \"axios\";\n\nimport styles from './Register.module.css';\n\nconst Register = (props) => {\n\n    const [username1, setUsername] = useState('');\n    const [password1, setPassword] = useState('');\n    const [cpassword1, setCPassword] = useState('');\n    const [exist, setExist] = useState(false);\n\n    const sendPostRequest = async () => {\n        let result = await Axios.post(\"http://localhost:3001/register\", {\n        username: username1,\n        password: password1\n      }, {\n        headers: {'Content-Type': 'application/json'}\n      });\n        if(result.data !== 1){\n            alert(JSON.stringify(\"Registered!\"));\n            return '0';\n        }else{\n            setExist(true);\n            alert(JSON.stringify(\"Username Exists!\"));\n        }\n        \n        \n        // Axios.post(\"http://localhost:3001/register\", {\n        //     username: username1,\n        //     password: password1,\n        // }).then(()=>{\n        //         alert(\"successful insert\");\n        //     });\n        // try {\n        //     await Axios.post(\"http://localhost:3001/register\", {\n        //         username: username,\n        //         password: password,\n        //     }).then(()=>{\n        //         alert(\"Registered!\");\n        //     });\n        //     // console.log(resp.data);\n        // }catch (err) {\n        //     // Handle Error Here\n        //     console.error(err);\n        // }\n    };\n\n    return(\n        <div className={styles.div}>\n            <h4 style={{textAlign: 'center'}}>Register</h4>\n            <Formik\n                validateOnChange={false}\n                validateOnBlur={false}\n                initialValues={{ email: '', password: '', cpassword:'' }}\n                validate={values => {\n                    const errors = {};\n                    if (!values.email) {\n                    errors.email = 'Required';\n                    } else if (\n                    !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n                    ) {\n                    errors.email = 'Invalid email address';\n                    }\n                    if(exist === true){\n                    errors.email = 'Username is not available';\n                    }\n                    if(!values.password){\n                        errors.password = 'Required';\n                    }\n                    else if(values.password.length < 5){\n                        errors.password = 'Password too short!';\n                    }\n                    else if(values.password.length === 0){\n                        errors.password = '';\n                    }\n                    if(values.cpassword !== values.password){\n                        errors.cpassword = 'Password and Confirm Password did not match';\n                    }\n                    return errors;\n                }}\n                onSubmit={(values, { validate, setSubmitting, resetForm}) => {\n                    setTimeout(() => {\n                    sendPostRequest().then(res =>{\n                        if(res === '0'){\n                            console.log(res);\n                            setPassword('');\n                            setUsername('');\n                            resetForm({values: ''});\n                        }else{\n                            console.log(values)\n                            // validate(values);\n                        }\n                    })\n                    \n                    setSubmitting(false);\n                    }, 400);\n                }}\n                >\n                {({ isSubmitting }) => (\n                    <Form className={styles.form}>\n                        <label className={`${styles.label}`}>Username</label>\n                    <Field onKeyUp={(event) => {setUsername(event.target.value)}} type=\"email\" name=\"email\" className={`${styles.input}`}/>\n                    <ErrorMessage name=\"email\" component=\"div\" />\n                    <label className={`${styles.label}`}>Password</label>\n                    <Field onKeyUp={(event) => {setPassword(event.target.value)}} type=\"password\" name=\"password\" className={`${styles.input}`}/>\n                    <ErrorMessage name=\"password\" component=\"div\" />\n                    <label className={`${styles.label}`}>Confirm Password</label>\n                    <Field onKeyUp={(event) => {setCPassword(event.target.value)}} type=\"password\" name=\"cpassword\" className={`${styles.input}`}/>\n                    <ErrorMessage name=\"cpassword\" component=\"div\" />\n                    <button onSubmit={sendPostRequest} type=\"submit\" disabled={isSubmitting} className={`${styles.button}`}>\n                        Submit\n                    </button>\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    );\n}\n\nexport default Register;"]},"metadata":{},"sourceType":"module"}