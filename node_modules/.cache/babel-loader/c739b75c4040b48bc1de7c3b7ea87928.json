{"ast":null,"code":"import * as Yup from 'yup';\n\nconst Schema = props => {};\n\n_c = Schema;\nexport default Schema;\nexport let RegisterSchema = Yup.object().shape({\n  username: Yup.string().min(5, \"Username must be 5 characters long\").required('Required Username').test(\"is_exists\", `${value} is not available`, value => {\n    return new Promise(async (resolve, reject) => {// if(value === result.data.username){\n      //     resolve(false)\n      // }\n      // else{\n      //     resolve(true)\n      // }\n    });\n  }),\n  password: Yup.string().min(6, \"Must be 6 or more characters\").required('Required Password'),\n  cpassword: Yup.string().oneOf([Yup.ref('password'), null], 'Passwords must match').required('Required Confirm Password')\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"Schema\");","map":{"version":3,"sources":["/Users/kururugi/Desktop/React Applications/my-barber/src/Schemas/Schema.js"],"names":["Yup","Schema","props","RegisterSchema","object","shape","username","string","min","required","test","value","Promise","resolve","reject","password","cpassword","oneOf","ref"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAU,CAExB,CAFD;;KAAMD,M;AAIN,eAAeA,MAAf;AAEA,OAAO,IAAIE,cAAc,GAAGH,GAAG,CAACI,MAAJ,GAAaC,KAAb,CAAmB;AAC3CC,EAAAA,QAAQ,EAAEN,GAAG,CAACO,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoB,oCAApB,EAA0DC,QAA1D,CAAmE,mBAAnE,EACTC,IADS,CACJ,WADI,EACU,GAAEC,KAAM,mBADlB,EACuCA,KAAD,IAAS;AACrD,WAAO,IAAIC,OAAJ,CAAa,OAAOC,OAAP,EAAgBC,MAAhB,KAAyB,CAE7C;AACA;AACA;AACA;AACA;AACA;AACC,KARM,CAAP;AASH,GAXS,CADiC;AAc3CC,EAAAA,QAAQ,EAAEf,GAAG,CAACO,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoB,8BAApB,EAAoDC,QAApD,CAA6D,mBAA7D,CAdiC;AAe3CO,EAAAA,SAAS,EAAEhB,GAAG,CAACO,MAAJ,GACVU,KADU,CACJ,CAACjB,GAAG,CAACkB,GAAJ,CAAQ,UAAR,CAAD,EAAsB,IAAtB,CADI,EACyB,sBADzB,EACiDT,QADjD,CAC0D,2BAD1D;AAfgC,CAAnB,CAArB","sourcesContent":["import * as Yup from 'yup';\n\nconst Schema = (props) =>{\n\n}\n\nexport default Schema;\n\nexport let RegisterSchema = Yup.object().shape({\n    username: Yup.string().min(5, \"Username must be 5 characters long\").required('Required Username')\n    .test(\"is_exists\", `${value} is not available`, (value)=>{\n        return new Promise( async (resolve, reject)=>{\n                \n        // if(value === result.data.username){\n        //     resolve(false)\n        // }\n        // else{\n        //     resolve(true)\n        // }\n        })\n    })\n    ,\n    password: Yup.string().min(6, \"Must be 6 or more characters\").required('Required Password'),\n    cpassword: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Passwords must match').required('Required Confirm Password')\n});"]},"metadata":{},"sourceType":"module"}