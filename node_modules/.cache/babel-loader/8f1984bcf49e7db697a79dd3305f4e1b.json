{"ast":null,"code":"var _jsxFileName = \"/Users/kururugi/Desktop/React Applications/my-barber/src/Components/Login/Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport Axios from \"axios\";\nimport * as Yup from 'yup';\nimport TextField from \"../../UI/TextField/TextField\";\nimport Button from \"../../UI/Button/Button\";\nimport styles from './Login.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = props => {\n  _s();\n\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  let loginSchema = Yup.object().shape({\n    username: Yup.string().required('Required Username'),\n    password: Yup.string().required(\"Required password\").test(\"is_exists\", \"Incorrect Password\", value => {\n      return new Promise(async (resolve, reject) => {\n        let result = await Axios.post(\"http://localhost:3001/login\", {\n          username: username,\n          password: password\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n\n        if (result.data.username) {\n          resolve(false);\n        } else {\n          resolve(true);\n        }\n      });\n    })\n  });\n\n  const sendGetRequest = async () => {\n    try {\n      const resp = await Axios.post(\"http://localhost:3001/login\", {\n        username: username,\n        password: password\n      });\n      console.log(resp.data);\n    } catch (err) {\n      // Handle Error Here\n      console.error(err);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.div,\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: \"Welcome to Verna Store. Please Login.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        username: '',\n        password: ''\n      },\n      validationSchema: loginSchema,\n      onSubmit: (values, {\n        setSubmitting,\n        resetForm\n      }) => {\n        setTimeout(() => {\n          sendGetRequest();\n          setSubmitting(false);\n        }, 100);\n      },\n      children: ({\n        isSubmitting,\n        errors,\n        touched\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        className: styles.form,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: `${styles.label}`,\n          children: \"Username\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          onKeyUp: event => {\n            setUsername(event.target.value);\n          },\n          type: \"text\",\n          name: \"username\",\n          className: `${styles.input}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), errors.username && touched.username ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: errors.username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 61\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"label\", {\n          className: `${styles.label}`,\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          onKeyUp: event => {\n            setPassword(event.target.value);\n          },\n          type: \"password\",\n          name: \"password\",\n          className: `${styles.input}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), errors.password && touched.password ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: errors.password\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 61\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n          onSubmit: null,\n          type: \"submit\",\n          disabled: isSubmitting,\n          className: `${styles.button}`,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Login, \"wuQOK7xaXdVz4RMrZQhWbI751Oc=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/kururugi/Desktop/React Applications/my-barber/src/Components/Login/Login.js"],"names":["React","useState","Formik","Form","Field","ErrorMessage","Axios","Yup","TextField","Button","styles","Login","props","username","setUsername","password","setPassword","loginSchema","object","shape","string","required","test","value","Promise","resolve","reject","result","post","headers","data","sendGetRequest","resp","console","log","err","error","div","textAlign","values","setSubmitting","resetForm","setTimeout","isSubmitting","errors","touched","form","label","event","target","input","button"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport Axios from \"axios\";\nimport * as Yup from 'yup';\n\nimport TextField from \"../../UI/TextField/TextField\";\nimport Button from \"../../UI/Button/Button\";\nimport styles from './Login.module.css';\n\n\nconst Login = (props) =>{\n\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n\n    let loginSchema = Yup.object().shape({\n        username: Yup.string().required('Required Username'),\n        password: Yup.string().required(\"Required password\")\n        .test(\"is_exists\", \"Incorrect Password\", (value)=>{\n            return new Promise( async (resolve, reject)=>{\n                let result = await Axios.post(\"http://localhost:3001/login\", {\n                    username: username,\n                    password: password\n                    }, {\n                        headers: {'Content-Type': 'application/json'}\n                    })\n                    \n            if(result.data.username){\n                resolve(false)\n            }\n            else{\n                resolve(true)\n            }\n            })\n        }),\n    })\n\n    const sendGetRequest = async () =>{\n        try {\n            const resp = await Axios.post(\"http://localhost:3001/login\", {\n                username: username,\n                password: password\n            });\n            console.log(resp.data);\n        } catch (err) {\n            // Handle Error Here\n            console.error(err);\n        }\n    };\n\n    return(\n        <div className={styles.div}>\n            <h4 style={{textAlign: 'center'}}>Welcome to Verna Store. Please Login.</h4>\n            <Formik\n             initialValues={{ username: '', password: ''}}\n             validationSchema={loginSchema}\n             onSubmit={(values, {setSubmitting, resetForm}) => {\n                setTimeout(() => {\n                    sendGetRequest()\n                setSubmitting(false);\n                }, 100);\n            }}\n            >\n            {({isSubmitting, errors, touched})=>(\n                <Form className={styles.form}>\n                    <label className={`${styles.label}`}>Username</label>\n                    <Field onKeyUp={(event) => {setUsername(event.target.value)}} type=\"text\" name=\"username\" className={`${styles.input}`}/>\n                    {\n                     errors.username && touched.username ? (<div>{errors.username}</div>) : null\n                    }\n                    <label className={`${styles.label}`}>Password</label>\n                    <Field onKeyUp={(event) => {setPassword(event.target.value)}} type=\"password\" name=\"password\" className={`${styles.input}`}/>\n                    {\n                     errors.password && touched.password ? (<div>{errors.password}</div>) : null\n                    }\n                    <button onSubmit={null} type=\"submit\" disabled={isSubmitting} className={`${styles.button}`}>\n                        Submit\n                    </button>\n                </Form>\n            )}\n            </Formik>\n            {/* <form className={styles.form}> */}\n                {/* <TextField onChange={(event) => {setUsername(event.target.value)}} label=\"Username\" type=\"input\"/>\n                <TextField onChange={(event) => {setPassword(event.target.value)}} label=\"Password\" type=\"password\"/>\n                <Button onClick={sendGetRequest} blue>Login</Button> */}\n                {/* <Button>Register</Button> */}\n            {/* </form> */}\n        </div>\n    );\n\n}\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}