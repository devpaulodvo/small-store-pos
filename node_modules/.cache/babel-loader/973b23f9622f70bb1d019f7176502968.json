{"ast":null,"code":"import * as Yup from 'yup';\nexport let RegisterSchema = Yup.object().shape({\n  username: Yup.string().min(5, \"Username must be 5 characters long\").required('Required Username').test(\"is_exists\", null, value => {\n    return new Promise((resolve, reject) => {\n      if (value) {\n        resolve(false);\n      } else {\n        resolve(true);\n      }\n    });\n  }),\n  password: Yup.string().min(6, \"Must be 6 or more characters\").required('Required Password'),\n  cpassword: Yup.string().oneOf([Yup.ref('password'), null], 'Passwords must match').required('Required Confirm Password')\n});\nexport let LoginSchema = Yup.object().shape({\n  username: Yup.string().required('Required Username') // .test(\"is_exists\", \"Incorrect Password\", (value)=>{\n  //     return new Promise( async (resolve, reject)=>{\n  //         let result = await Axios.post(\"http://localhost:3001/login\", {\n  //             username: username,\n  //             password: password\n  //             }, {\n  //                 headers: {'Content-Type': 'application/json'}\n  //             })\n  //     if(result.data.username){\n  //         resolve(true)\n  //     }\n  //     else{\n  //         resolve(false)\n  //     }\n  //     })\n  // })\n  ,\n  password: Yup.string().required(\"Required password\") // .test(\"is_exists\", \"Incorrect Password\", (value)=>{\n  //     return new Promise( async (resolve, reject)=>{\n  //         let result = await Axios.post(\"http://localhost:3001/login\", {\n  //             username: username,\n  //             password: password\n  //             }, {\n  //                 headers: {'Content-Type': 'application/json'}\n  //             })\n  //     if(result.data.username){\n  //         resolve(true)\n  //     }\n  //     else{\n  //         resolve(false)\n  //     }\n  //     })\n  // }),\n\n});","map":{"version":3,"sources":["/Users/kururugi/Desktop/React Applications/my-barber/src/Schemas/Schema.js"],"names":["Yup","RegisterSchema","object","shape","username","string","min","required","test","value","Promise","resolve","reject","password","cpassword","oneOf","ref","LoginSchema"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AAGA,OAAO,IAAIC,cAAc,GAAGD,GAAG,CAACE,MAAJ,GAAaC,KAAb,CAAmB;AAC3CC,EAAAA,QAAQ,EAAEJ,GAAG,CAACK,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoB,oCAApB,EAA0DC,QAA1D,CAAmE,mBAAnE,EACTC,IADS,CACJ,WADI,EACS,IADT,EACgBC,KAAD,IAAS;AAC9B,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAmB;AAClC,UAAGH,KAAH,EAAS;AACLE,QAAAA,OAAO,CAAC,KAAD,CAAP;AACH,OAFD,MAGI;AACAA,QAAAA,OAAO,CAAC,IAAD,CAAP;AACH;AACJ,KAPM,CAAP;AAQH,GAVS,CADiC;AAa3CE,EAAAA,QAAQ,EAAEb,GAAG,CAACK,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoB,8BAApB,EAAoDC,QAApD,CAA6D,mBAA7D,CAbiC;AAc3CO,EAAAA,SAAS,EAAEd,GAAG,CAACK,MAAJ,GACVU,KADU,CACJ,CAACf,GAAG,CAACgB,GAAJ,CAAQ,UAAR,CAAD,EAAsB,IAAtB,CADI,EACyB,sBADzB,EACiDT,QADjD,CAC0D,2BAD1D;AAdgC,CAAnB,CAArB;AAkBP,OAAO,IAAIU,WAAW,GAAGjB,GAAG,CAACE,MAAJ,GAAaC,KAAb,CAAmB;AACxCC,EAAAA,QAAQ,EAAEJ,GAAG,CAACK,MAAJ,GAAaE,QAAb,CAAsB,mBAAtB,CAD8B,CAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBwC;AAoBxCM,EAAAA,QAAQ,EAAEb,GAAG,CAACK,MAAJ,GAAaE,QAAb,CAAsB,mBAAtB,CApB8B,CAqBxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AArCwC,CAAnB,CAAlB","sourcesContent":["import * as Yup from 'yup';\n\n\nexport let RegisterSchema = Yup.object().shape({\n    username: Yup.string().min(5, \"Username must be 5 characters long\").required('Required Username')\n    .test(\"is_exists\", null, (value)=>{\n        return new Promise((resolve, reject)=>{\n            if(value){\n                resolve(false)\n            }\n            else{\n                resolve(true)\n            }\n        })\n    })\n    ,\n    password: Yup.string().min(6, \"Must be 6 or more characters\").required('Required Password'),\n    cpassword: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Passwords must match').required('Required Confirm Password')\n});\n\nexport let LoginSchema = Yup.object().shape({\n    username: Yup.string().required('Required Username')\n    // .test(\"is_exists\", \"Incorrect Password\", (value)=>{\n    //     return new Promise( async (resolve, reject)=>{\n    //         let result = await Axios.post(\"http://localhost:3001/login\", {\n    //             username: username,\n    //             password: password\n    //             }, {\n    //                 headers: {'Content-Type': 'application/json'}\n    //             })\n                \n    //     if(result.data.username){\n    //         resolve(true)\n    //     }\n    //     else{\n    //         resolve(false)\n    //     }\n    //     })\n    // })\n    ,\n    password: Yup.string().required(\"Required password\")\n    // .test(\"is_exists\", \"Incorrect Password\", (value)=>{\n    //     return new Promise( async (resolve, reject)=>{\n    //         let result = await Axios.post(\"http://localhost:3001/login\", {\n    //             username: username,\n    //             password: password\n    //             }, {\n    //                 headers: {'Content-Type': 'application/json'}\n    //             })\n                \n    //     if(result.data.username){\n    //         resolve(true)\n    //     }\n    //     else{\n    //         resolve(false)\n    //     }\n    //     })\n    // }),\n})"]},"metadata":{},"sourceType":"module"}