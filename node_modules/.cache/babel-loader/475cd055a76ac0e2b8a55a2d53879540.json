{"ast":null,"code":"var _jsxFileName = \"/Users/kururugi/Desktop/React Applications/my-barber/src/Components/Register/Register.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport Axios from \"axios\";\nimport * as Yup from 'yup';\nimport styles from './Register.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Register = props => {\n  _s();\n\n  const [username1, setUsername] = useState('');\n  const [password1, setPassword] = useState('');\n  const [cpassword1, setCPassword] = useState('');\n  let registerSchema = Yup.object().shape({\n    username: Yup.string().min(5, \"Username must be 5 characters long\").required('Required Username').test(\"is_exists\", null, value => {\n      return new Promise(async (resolve, reject) => {\n        try {\n          let result = await Axios.post(\"http://localhost:3001/checkusername\", {\n            username: username1,\n            password: password1\n          }, {\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n\n          if (value === result.data.username) {\n            resolve(false);\n          } else {\n            resolve(true);\n          }\n        } catch (err) {\n          return;\n        }\n      });\n    }),\n    password: Yup.string().min(6, \"Must be 6 or more characters\").required('Required Password'),\n    cpassword: Yup.string().oneOf([Yup.ref('password'), null], 'Passwords must match').required('Required Confirm Password')\n  });\n\n  const sendPostRequest = async () => {\n    try {\n      let result = await Axios.post(\"http://localhost:3001/register\", {\n        username: username1,\n        password: password1\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.div,\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        username: '',\n        password: '',\n        cpassword: ''\n      },\n      validationSchema: RegisterSchema,\n      validateOnBlur: false,\n      validateOnChange: false,\n      onSubmit: async (values, {\n        setStatus,\n        setSubmitting,\n        resetForm\n      }) => {\n        setStatus(undefined);\n        let result = await Axios.post(\"http://localhost:3001/checkusername\", {\n          username: username1,\n          password: password1\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n\n        if (result.data.username === username1) {\n          setTimeout(() => {\n            setStatus({\n              username: result.data.username\n            });\n          }, 100);\n        } else {\n          setTimeout(() => {\n            sendPostRequest();\n            resetForm({\n              values: ''\n            });\n            setPassword('');\n            setUsername('');\n            setSubmitting(false);\n          }, 100);\n        }\n\n        setStatus(undefined);\n      },\n      children: ({\n        isSubmitting,\n        errors,\n        touched,\n        status\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        className: styles.form,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: `${styles.label}`,\n          children: \"Username\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          onKeyUp: event => {\n            setUsername(event.target.value);\n          },\n          type: \"text\",\n          name: \"username\",\n          className: `${styles.input}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this), errors.username && touched.username ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: errors.username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 61\n        }, this) : status && status.username ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [status.username, \" is not available\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 122\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"label\", {\n          className: `${styles.label}`,\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          onKeyUp: event => {\n            setPassword(event.target.value);\n          },\n          type: \"password\",\n          name: \"password\",\n          className: `${styles.input}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this), errors.password && touched.password ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: errors.password\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 61\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"label\", {\n          className: `${styles.label}`,\n          children: \"Confirm Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          onKeyUp: event => {\n            setCPassword(event.target.value);\n          },\n          type: \"password\",\n          name: \"cpassword\",\n          className: `${styles.input}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), errors.cpassword && touched.cpassword ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: errors.cpassword\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 63\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n          onSubmit: null,\n          type: \"submit\",\n          disabled: isSubmitting,\n          className: `${styles.button}`,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Register, \"SRdkX483/SxEUkKqNIqpQf+tHsw=\");\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/Users/kururugi/Desktop/React Applications/my-barber/src/Components/Register/Register.js"],"names":["React","useState","Formik","Form","Field","ErrorMessage","Axios","Yup","styles","Register","props","username1","setUsername","password1","setPassword","cpassword1","setCPassword","registerSchema","object","shape","username","string","min","required","test","value","Promise","resolve","reject","result","post","password","headers","data","err","cpassword","oneOf","ref","sendPostRequest","console","log","div","textAlign","RegisterSchema","values","setStatus","setSubmitting","resetForm","undefined","setTimeout","isSubmitting","errors","touched","status","form","label","event","target","input","button"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport Axios from \"axios\";\nimport * as Yup from 'yup';\n\n\nimport styles from './Register.module.css';\n\nconst Register = (props) => {\n    \n    const [username1, setUsername] = useState('');\n    const [password1, setPassword] = useState('');\n    const [cpassword1, setCPassword] = useState('');\n\n    let registerSchema = Yup.object().shape({\n        username: Yup.string().min(5, \"Username must be 5 characters long\").required('Required Username')\n        .test(\"is_exists\", null, (value)=>{\n            return new Promise(async (resolve, reject)=>{\n                try{\n                    let result = await Axios.post(\"http://localhost:3001/checkusername\", {\n                        username: username1,\n                        password: password1\n                    }, {headers: {'Content-Type': 'application/json'}})\n                   if(value === result.data.username){\n                        resolve(false)\n                    }\n                    else{\n                        resolve(true)\n                    }\n                }catch(err){\n                    return;\n                }\n               \n            })\n        })\n        \n        ,\n        password: Yup.string().min(6, \"Must be 6 or more characters\").required('Required Password'),\n        cpassword: Yup.string()\n        .oneOf([Yup.ref('password'), null], 'Passwords must match').required('Required Confirm Password')\n    });\n\n    const sendPostRequest = async () => {\n        try{\n        let result = await Axios.post(\"http://localhost:3001/register\", {\n        username: username1,\n        password: password1\n        }, {\n            headers: {'Content-Type': 'application/json'}\n        });\n        }catch(err){\n            console.log(err);\n        }\n    };\n\n    return(\n        <div className={styles.div}>\n            <h4 style={{textAlign: 'center'}}>Register</h4>\n            <Formik\n                initialValues={{ username: '', password: '', cpassword:'' }}\n                validationSchema={RegisterSchema}\n                validateOnBlur={false}\n                validateOnChange={false}\n                onSubmit={async (values, {setStatus, setSubmitting, resetForm }) => {\n                    setStatus(undefined)\n                    let result = await Axios.post(\"http://localhost:3001/checkusername\", {\n                        username: username1,\n                        password: password1\n                    }, {headers: {'Content-Type': 'application/json'}})\n                \n                    if(result.data.username === username1){\n                        setTimeout(() => {\n                        setStatus({username: result.data.username})\n                        }, 100)\n                    }else{\n                        setTimeout(() => {\n                            sendPostRequest()\n                            resetForm({values: ''});\n                            setPassword('');\n                            setUsername('');\n                            setSubmitting(false);\n                        }, 100);\n\n                    }\n\n                    setStatus(undefined)\n                    \n                }}\n                >\n                {({ isSubmitting, errors, touched, status }) => (\n                    <Form className={styles.form}>\n                        <label className={`${styles.label}`}>Username</label>\n                    <Field  \n                        onKeyUp={(event) => {\n                            setUsername(event.target.value)\n                            \n                        }} \n                        type=\"text\" \n                        name=\"username\" \n                        className={`${styles.input}`}\n                    />\n                    {\n                     errors.username && touched.username ? (<div>{errors.username}</div>) : status && status.username ? (<div>{status.username} is not available</div>) : null\n                    }\n                    <label className={`${styles.label}`}>Password</label>\n                    <Field onKeyUp={(event) => {setPassword(event.target.value)}} type=\"password\" name=\"password\" className={`${styles.input}`}/>\n                    {\n                     errors.password && touched.password ? (<div>{errors.password}</div>) : null\n                    }\n                    <label className={`${styles.label}`}>Confirm Password</label>\n                    <Field onKeyUp={(event) => {setCPassword(event.target.value)}} type=\"password\" name=\"cpassword\" className={`${styles.input}`}/>\n                    {\n                     errors.cpassword && touched.cpassword ? (<div>{errors.cpassword}</div>) : null\n                    }\n                    <button onSubmit={null} type=\"submit\" disabled={isSubmitting} className={`${styles.button}`}>\n                        Submit\n                    </button>\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    );\n}\n\nexport default Register;"]},"metadata":{},"sourceType":"module"}