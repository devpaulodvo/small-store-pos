{"ast":null,"code":"import * as Yup from 'yup'; // export let RegisterSchema = Yup.object().shape({\n//     username: Yup.string().min(5, \"Username must be 5 characters long\").required('Required Username')\n// .test(\"is_exists\", null, (value)=>{\n//     return new Promise((resolve, reject)=>{\n//         try{\n//            if(value.length!==0){\n//                 resolve(false)\n//             }\n//             else{\n//                 resolve(true)\n//             }\n//         }catch(err){\n//             return;\n//         }\n//     })\n// })\n// \n//     ,\n//     password: Yup.string().min(6, \"Must be 6 or more characters\").required('Required Password'),\n//     cpassword: Yup.string()\n//     .oneOf([Yup.ref('password'), null], 'Passwords must match').required('Required Confirm Password')\n// });\n\nexport let LoginSchema = Yup.object().shape({\n  username: Yup.string().required('Required Username') // .test(\"is_exists\", \"Incorrect Password\", (value)=>{\n  //     return new Promise( async (resolve, reject)=>{\n  //         let result = await Axios.post(\"http://localhost:3001/login\", {\n  //             username: username,\n  //             password: password\n  //             }, {\n  //                 headers: {'Content-Type': 'application/json'}\n  //             })\n  //     if(result.data.username){\n  //         resolve(true)\n  //     }\n  //     else{\n  //         resolve(false)\n  //     }\n  //     })\n  // })\n  ,\n  password: Yup.string().required(\"Required password\") // .test(\"is_exists\", \"Incorrect Password\", (value)=>{\n  //     return new Promise( async (resolve, reject)=>{\n  //         let result = await Axios.post(\"http://localhost:3001/login\", {\n  //             username: username,\n  //             password: password\n  //             }, {\n  //                 headers: {'Content-Type': 'application/json'}\n  //             })\n  //     if(result.data.username){\n  //         resolve(true)\n  //     }\n  //     else{\n  //         resolve(false)\n  //     }\n  //     })\n  // }),\n\n});","map":{"version":3,"sources":["/Users/kururugi/Desktop/React Applications/my-barber/src/Schemas/Schema.js"],"names":["Yup","LoginSchema","object","shape","username","string","required","password"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB,C,CAGA;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACJ;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,WAAW,GAAGD,GAAG,CAACE,MAAJ,GAAaC,KAAb,CAAmB;AACxCC,EAAAA,QAAQ,EAAEJ,GAAG,CAACK,MAAJ,GAAaC,QAAb,CAAsB,mBAAtB,CAD8B,CAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBwC;AAoBxCC,EAAAA,QAAQ,EAAEP,GAAG,CAACK,MAAJ,GAAaC,QAAb,CAAsB,mBAAtB,CApB8B,CAqBxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AArCwC,CAAnB,CAAlB","sourcesContent":["import * as Yup from 'yup';\n\n\n// export let RegisterSchema = Yup.object().shape({\n//     username: Yup.string().min(5, \"Username must be 5 characters long\").required('Required Username')\n    // .test(\"is_exists\", null, (value)=>{\n    //     return new Promise((resolve, reject)=>{\n    //         try{\n    //            if(value.length!==0){\n    //                 resolve(false)\n    //             }\n    //             else{\n    //                 resolve(true)\n    //             }\n    //         }catch(err){\n    //             return;\n    //         }\n           \n    //     })\n    // })\n    // \n//     ,\n//     password: Yup.string().min(6, \"Must be 6 or more characters\").required('Required Password'),\n//     cpassword: Yup.string()\n//     .oneOf([Yup.ref('password'), null], 'Passwords must match').required('Required Confirm Password')\n// });\n\nexport let LoginSchema = Yup.object().shape({\n    username: Yup.string().required('Required Username')\n    // .test(\"is_exists\", \"Incorrect Password\", (value)=>{\n    //     return new Promise( async (resolve, reject)=>{\n    //         let result = await Axios.post(\"http://localhost:3001/login\", {\n    //             username: username,\n    //             password: password\n    //             }, {\n    //                 headers: {'Content-Type': 'application/json'}\n    //             })\n                \n    //     if(result.data.username){\n    //         resolve(true)\n    //     }\n    //     else{\n    //         resolve(false)\n    //     }\n    //     })\n    // })\n    ,\n    password: Yup.string().required(\"Required password\")\n    // .test(\"is_exists\", \"Incorrect Password\", (value)=>{\n    //     return new Promise( async (resolve, reject)=>{\n    //         let result = await Axios.post(\"http://localhost:3001/login\", {\n    //             username: username,\n    //             password: password\n    //             }, {\n    //                 headers: {'Content-Type': 'application/json'}\n    //             })\n                \n    //     if(result.data.username){\n    //         resolve(true)\n    //     }\n    //     else{\n    //         resolve(false)\n    //     }\n    //     })\n    // }),\n})"]},"metadata":{},"sourceType":"module"}